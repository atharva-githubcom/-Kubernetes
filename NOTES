
# **Kubernetes Notes**  

## **1. What is Kubernetes?**  
Kubernetes is an open-source platform that helps in deploying, managing, and scaling containerized applications automatically. It ensures that applications run smoothly without manual intervention, even if some parts fail.

---

## **2. What is a Pod?**  
A **Pod** is the smallest unit in Kubernetes. It contains one or more containers that share storage, network, and configurations.  
- If a Pod fails, Kubernetes replaces it automatically.  
- Pods are ephemeral and should not be managed manually; instead, use **Deployments** or **ReplicaSets**.

---

## **3. What is Deployment?**  
A **Deployment** manages a group of Pods. It helps in:  
✅ Creating, updating, and scaling applications automatically.  
✅ Rolling back to a previous version in case of failure.  
✅ Managing multiple replicas for high availability.  

---

## **4. What is Rollout?**  
A **Rollout** is the process of updating a Deployment:  
- Kubernetes **gradually replaces old Pods** with new ones to prevent downtime.  
- If an update fails, you can roll back to a previous version using:  
  ```bash
  kubectl rollout undo deployment <deployment-name>
  ```

---

## **5. What is Namespace?**  
A **Namespace** is a way to organize and separate resources within a Kubernetes cluster.  
- **By default, Kubernetes has a `default` namespace**, but you can create custom namespaces.  
- Namespaces help in managing resources for different teams, environments (dev, staging, prod), or applications.  

### **Common Namespace Commands**  
✅ **List all namespaces**  
```bash
kubectl get namespaces
```  
✅ **Create a new namespace**  
```bash
kubectl create namespace dev
```  
✅ **Set a default namespace for your session**  
```bash
kubectl config set-context --current --namespace=dev
```  
✅ **Delete a namespace**  
```bash
kubectl delete namespace dev
```  

---

## **6. What is Replication Controller?**  
A **Replication Controller** ensures a fixed number of Pods are always running.  
- If a Pod crashes, it creates a new one.  
- However, it is **deprecated** and replaced by **ReplicaSet**.

---

## **7. What is ReplicaSet?**  
A **ReplicaSet** is an improved version of the Replication Controller.  
✅ It ensures the desired number of Pods are running.  
✅ Supports more **flexible** Pod selection using **matchLabels** and **matchExpressions**.  
✅ Deployments use ReplicaSets internally.

### **Difference Between Replication Controller and ReplicaSet**  

| Feature               | Replication Controller (Old) | ReplicaSet (New & Recommended) |
|-----------------------|----------------------------|--------------------------------|
| Ensures desired Pods  | ✅ Yes                        | ✅ Yes                          |
| Automatically restarts failed Pods | ✅ Yes | ✅ Yes |
| Supports advanced selectors | ❌ No (Only key=value) | ✅ Yes (matchLabels, matchExpressions) |
| Used by Deployments | ❌ No | ✅ Yes |

### **What Should You Use Today?**  
🚀 Instead of using ReplicaSet directly, it is best to use **Deployments**, which internally use ReplicaSets to manage Pods.  
- Deployments provide **automatic rolling updates, rollbacks, and scaling**.  

---

### ✅ **Conclusion**  
Kubernetes simplifies application management using **Pods, Deployments, Namespaces, and ReplicaSets**.  
- Use **Namespaces** to organize resources.  
- Use **Deployments** instead of manually managing Pods or ReplicaSets.  
- Use **Rollouts** for safe updates.  

This covers the fundamentals of Kubernetes! 🚀 Let me know if you want any modifications.
