Here is your content with the next steps included:  

---

### **Installing `kubectl` on Ubuntu**  
Run the following commands to install `kubectl`:  
```sh
sudo apt-get update
sudo apt-get install -y kubectl
```

---

### **Pods in Kubernetes**  
Pods are the smallest deployable units of computing that you can create and manage in Kubernetes. A Pod  is a group of one or more containers, with shared storage and network resources, and a specification for how to run the containers.  

---

### **Creating a Pod Using `pod.yml`**  
1. **Create a new file named `pod.yml`**:  
   ```sh
   vim pod.yml
   ```
2. **Add the following YAML configuration** to define a Pod:  
   ```yaml
   apiVersion: v1
   kind: Pod
   metadata:
     name: nginx
   spec:
     containers:
     - name: nginx
       image: nginx:1.14.2
       ports:
       - containerPort: 80
   ```
3. **Save the file and exit 

---

### **Explanation of `pod.yml` File**  

The `pod.yml` file defines a Kubernetes **Pod**, which runs an **Nginx** container. Below is a breakdown of each section:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80
```

---

### **Breakdown of Each Section:**

1. **`apiVersion: v1`**  
   - Specifies the API version used to create the Pod.  
   - `v1` is the stable API version for basic Kubernetes resources like Pods.

2. **`kind: Pod`**  
   - Defines the **type** of Kubernetes resource.  
   - In this case, we are creating a **Pod**.

3. **`metadata` Section**  
   - Contains metadata (information) about the Pod.  
   - **`name: nginx`** â†’ Assigns the name **`nginx`** to this Pod.

4. **`spec` Section**  
   - Describes the specifications of the Pod, including its containers.

5. **`containers` Section**  
   - A list of containers that will run inside the Pod.  
   - This Pod has **one container**, named **`nginx`**.

6. **`name: nginx`**  
   - Names the container inside the Pod as **`nginx`**.  
   - This is useful when running multiple containers in the same Pod.

7. **`image: nginx:1.14.2`**  
   - Specifies the **Docker image** used by the container.  
   - `nginx:1.14.2` pulls version `1.14.2` of the **Nginx web server** from Docker Hub.

8. **`ports` Section**  
   - Defines the ports exposed by the container.  
   - **`containerPort: 80`** means the container will serve traffic on **port 80**.

---

### **Deploying the Pod in Kubernetes**
Once the `pod.yml` file is created, deploy the Pod using:

```sh
kubectl apply -f pod.yml
```

### **Verify the Pod Status**
Check if the Pod is running:

```sh
kubectl get pods
```

Expected Output:
```
NAME    READY   STATUS    RESTARTS   AGE
nginx   1/1     Running   0          10s
```

### **Describe the Pod**
Get more details about the Pod:

```sh
kubectl describe pod nginx
```

### **Delete the Pod (if needed)**
```sh
kubectl delete pod nginx
```

---

This `pod.yml` file ensures that Kubernetes runs an Nginx container and exposes it on **port 80**. 
